/*
 * Copyright (C) 2009 - 2018 Xilinx, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 *
 */

#include "echo.h"


uint8_t const FPGA_NUMS[FPGA_COUNT] = FPGA_NUMS_INIT;
uint8_t fpgaFreeNums[FPGA_COUNT] = {[0 ... FPGA_COUNT-1] = FPGA_NUM_SENTINEL};
uint8_t fpgaBusyNums[FPGA_COUNT] = {[0 ... FPGA_COUNT-1] = FPGA_NUM_SENTINEL};

u8_t iaScansDone = 0;
struct udp_pcb * iaScanPcbs[FPGA_COUNT] = {[0 ... FPGA_COUNT-1] = NULL};


int transfer_data() {
	return 0;
}

void print_app_header()
{
#if (LWIP_IPV6==0)
	xil_printf("\n\r\n\r-----lwIP TCP echo server ------\n\r");
#else
	xil_printf("\n\r\n\r-----lwIPv6 TCP echo server ------\n\r");
#endif
	xil_printf("TCP packets sent to port 6001 will be echoed back\n\r");
}

void payload_to_uppercase(char* payload, int len) {
	for (int i = 0; i < len; i++) {
		if (payload[i] >= 'a' && payload[i] <= 'z') {
			payload[i] = payload[i] - ('a' - 'A');
		} else if (payload[i] >= 'A' && payload[i] <= 'Z') {
			payload[i] = payload[i] + ('a' - 'A');
		}
	}
}

void print_payload(char* payload, int len, char* format_string) {
	char* buf = (char*)malloc(len * sizeof(char) + 1);
	buf[len] = '\x00';
	for(int i = 0; i < len; i++) {
		buf[i] = payload[i];
	}

	xil_printf(format_string, buf);
	free(buf);
}

err_t recv_callback(void *arg, struct tcp_pcb *tpcb,
                               struct pbuf *p, err_t err)
{
	/* do not read the packet if we are not in ESTABLISHED state */
	if (!p) {
		tcp_close(tpcb);
		tcp_recv(tpcb, NULL);
		return ERR_OK;
	}

	/* indicate that the packet has been received */
	tcp_recved(tpcb, p->len);

	// Modify payload and print  to stdout
	print_payload(p->payload, p->len, "Received: %s\n");
	payload_to_uppercase(p->payload, p->len);
	print_payload(p->payload, p->len, "Sending: %s\n");

	/* echo back the payload */
	/* in this case, we assume that the payload is < TCP_SND_BUF */
	if (tcp_sndbuf(tpcb) > p->len) {
		err = tcp_write(tpcb, p->payload, p->len, 1);
	} else
		xil_printf("no space in tcp_sndbuf\n\r");

	/* free the received pbuf */
	pbuf_free(p);

	return ERR_OK;
}

err_t accept_callback(void *arg, struct tcp_pcb *newpcb, err_t err)
{
	static int connection = 1;

	/* set the receive callback for this connection */
	tcp_recv(newpcb, recv_callback);

	/* just use an integer number indicating the connection id as the
	   callback argument */
	tcp_arg(newpcb, (void*)(UINTPTR)connection);

	/* increment for subsequent accepted connections */
	connection++;

	return ERR_OK;
}


void fpgaNumToIP(ip_addr_t* ipaddr, uint8_t num){
	IP4_ADDR(ipaddr, 1, 1, num, 2);
}


u8_t fpgaIpToNum(ip_addr_t* ipaddr){
	ip_addr_t mask;
	IP4_ADDR(&mask, 0, 0, 255, 0);
	ip_addr_t div;
	IP4_ADDR(&div, 0, 0, 1, 0);
	return (ipaddr->addr & mask.addr) >> ffs(div.addr);
}


int fpga_list_add(uint8_t* list, uint8_t num){
	for(size_t i = 0; i < FPGA_COUNT; i++){
		if(list[i] == FPGA_NUM_SENTINEL){
			list[i] = num;
			return 1;
		}
	}
	return -1;
}

int fpga_list_pop(uint8_t* list){
	int lastIndex = -1;
	for(int i = 0; i < FPGA_COUNT; i++){
		if(list[i] == FPGA_NUM_SENTINEL) break;
		lastIndex = i;
	}
	if(lastIndex == -1) return -1;
	int ret = list[lastIndex];
	list[lastIndex] = FPGA_NUM_SENTINEL;
	return ret;
}

int fpga_list_remove(uint8_t* list, uint8_t num){
	int numIndex = -1;
	for(int i = 0; i < FPGA_COUNT; i++){
		if(list[i] == num){
			numIndex = i;
			break;
		}
	}
	if(numIndex == -1) return -1;
	for(; numIndex < FPGA_COUNT-1; numIndex++){
		list[numIndex] = list[numIndex+1];
	}
	list[numIndex] = FPGA_NUM_SENTINEL;
	return 1;
}

void scan_for_IA_cb(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port){
	u8_t fpgaNum = (u8_t)arg;

}

void scan_for_IAs(){
	// attach udp listener
	err_t err;
	ip_addr_t iaIpAddr;
	for(u8_t i=0; i<FPGA_COUNT; i++){
		// make new pcb
		struct udp_pcb* pcb = udp_new();
		iaScanPcbs[i] = pcb;
		err = udp_bind(pcb, IP_ANY_TYPE, LB_UDP_PORT);
		// set up recv callback
		udp_recv(pcb, scan_for_IA_cb, (void*)(u32_t)i);
		// send CLIENT_DONE_STR packet
		fpgaNumToIP(&iaIpAddr, i);
		err = udp_connect(pcb, &iaIpAddr, IA_UDP_PORT);
		// check if LB_NOT_EXIST_STR in response
		// add i to free set
	}
}


int start_application(){
	struct tcp_pcb *pcb;
	err_t err;
	unsigned port = 7;

	/* create new TCP PCB structure */
	pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}

	/* bind to specified @port */
	err = tcp_bind(pcb, IP_ANY_TYPE, port);
	if (err != ERR_OK) {
		xil_printf("Unable to bind to port %d: err = %d\n\r", port, err);
		return -2;
	}

	/* we do not need any arguments to callback functions */
	tcp_arg(pcb, NULL);

	/* listen for connections */
	pcb = tcp_listen(pcb);
	if (!pcb) {
		xil_printf("Out of memory while tcp_listen\n\r");
		return -3;
	}

	/* specify callback to use for incoming connections */
	tcp_accept(pcb, accept_callback);

	xil_printf("TCP echo server started @ port %d\n\r", port);

	return 0;
}
